#!/usr/bin/env python

import time
import rospy # pylint: disable=import-error
from std_msgs.msg import String # pylint: disable=import-error
from std_msgs.msg import Int32 # pylint: disable=import-error
from frystation.msg import JointPose # pylint: disable=import-error
from frystation.msg import SyncWriteItem # pylint: disable=import-error
from frystation.srv import SetJointPoseTest, SetJointPoseTestResponse # pylint: disable=import-error
from frystation.srv import SetJointPose, SetJointPoseResponse # pylint: disable=import-error
from robotis_controller_msgs.msg import StatusMsg # pylint: disable=import-error

def manipulator_status_callback(data):
	global MANIPULATOR_MOVING
	if data.status_msg == "End Trajectory":
		MANIPULATOR_MOVING = False

def handle_manipulator_move(joints):
	print("Starting manipulator joint move")
	global MANIPULATOR_MOVING
	MANIPULATOR_MOVING = True
	msg = JointPose()
	msg.name = ["joint1", "joint2", "joint3", "joint4", "joint5", "joint6"]
	msg.value = [joints.joint_value[0], joints.joint_value[1], joints.joint_value[2], joints.joint_value[3], joints.joint_value[4], joints.joint_value[5]]
	pubManipulator.publish(msg)
	mustend = time.time() + 10
	while time.time() < mustend:
		if not MANIPULATOR_MOVING: break
		time.sleep(.1)
	print("manipulator joint move complete")
	return True 

def manipulator_move_server():
	rospy.init_node('manipulator_move_server')
	s = rospy.Service('manipulator_set_joint_values', SetJointPose, handle_manipulator_move)
	print("Ready to recieve manipulator move commands")
	rospy.spin()

if __name__ == "__main__":
	#create global variable to identify whether the manipulator is currently moving
	MANIPULATOR_MOVING = False

	#setup publisher to send manipulator joint commands
	pubManipulator = rospy.Publisher('/robotis/base/joint_pose_msg',JointPose, queue_size=1)

	#setup a subscriber to recieve notifications about manipulator status, allow 2 seconds for subscriber to register
	rospy.Subscriber("/robotis/status", StatusMsg, manipulator_status_callback)
	time.sleep(1) 
	manipulator_move_server()
