#!/usr/bin/env python

#This is the file with the instructions to make fries
#proof of concept 

import rospy # pylint: disable=import-error
import time
from std_msgs.msg import String # pylint: disable=import-error
from std_msgs.msg import Int32 # pylint: disable=import-error
from frystation.msg import JointPose # pylint: disable=import-error
from frystation.msg import SyncWriteItem # pylint: disable=import-error
from robotis_controller_msgs.msg import StatusMsg # pylint: disable=import-error


def manipulator_status_callback(data):
	global MANIPULATOR_MOVING
	if data.status_msg == "End Trajectory":
		MANIPULATOR_MOVING = False	

def manipulator_move(joints):
	global MANIPULATOR_MOVING
	MANIPULATOR_MOVING = True
	msg = JointPose()
	msg.name = ["joint1", "joint2", "joint3", "joint4", "joint5", "joint6"]
	msg.value = [joints[0], joints[1], joints[2], joints[3], joints[4], joints[5]]
	pubManipulator.publish(msg)
	mustend = time.time() + 10
	while time.time() < mustend:
		if not MANIPULATOR_MOVING: break
		time.sleep(.1)

def make_Fries():

	################################################################
	######################### Make Frys ############################
	################################################################

	#move the manipulator to the ...... position 
	manipulator_move([-0.3490658503988659, 0.9948376736367678, 0.43493604959698695, 0.0, -1.5446163880149817, 0.06981317007977318])
	time.sleep(1) 

	#move the manipulator to the powder grip position 
	manipulator_move([-0.4363323129985824, 0.9948376736367678, 0.43493604959698695, 0.0, -1.5446163880149817, 0.06981317007977318])
	time.sleep(1) 

	#move the manipulator to the powder pour position 1
	manipulator_move([-0.08726646259971647, 0.5235987755982988, 0.5585053606381855, 0.0, -1.2217304763960306, 0.06981317007977318])


if __name__=='__main__':
	try:
		#create global variable to identify whether the manipulator is currently moving
		MANIPULATOR_MOVING = False
		
		#create the ROS node for the application	
		rospy.init_node('frymaker')

		#setup publisher to send manipulator joint commands
		pubManipulator = rospy.Publisher('/robotis/base/joint_pose_msg',JointPose, queue_size=1)

		#setup a subscriber to recieve notifications about manipulator status, allow 2 seconds for subscriber to register
		rospy.Subscriber("/robotis/status", StatusMsg, manipulator_status_callback)
		time.sleep(1) 

		#run the main application
		make_Fries()
		
	except rospy.ROSInterruptException:
		pass


